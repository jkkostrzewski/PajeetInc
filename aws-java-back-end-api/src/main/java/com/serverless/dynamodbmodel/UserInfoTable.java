package com.serverless.dynamodbmodel;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig.TableNameOverride;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.serverless.dynamodbmodel.DynamoDBAdapter;
import com.serverless.dynamodbmodel.UserInfoItem;

@DynamoDBTable(tableName = "UserInfo")
public class UserInfoTable {

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = LogManager.getLogger(this.getClass());

    public UserInfoTable() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public Boolean ifTableExists() {
        return this.client.describeTable("UserInfo").getTable().getTableStatus().equals("ACTIVE");
    }


    public List<UserInfoItem> list() throws IOException {
    	DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<UserInfoItem> results = this.mapper.scan(UserInfoItem.class, scanExp);
        return results;
    }


    public UserInfoItem get(String id) throws IOException {
    	UserInfoItem item = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<UserInfoItem> queryExp = new DynamoDBQueryExpression<UserInfoItem>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<UserInfoItem> result = this.mapper.query(UserInfoItem.class, queryExp);
        if(result.size() > 0) {
        	item = result.get(0);
        }
        return item;
    }

    public void save(UserInfoItem newItem) throws IOException {
        this.mapper.save(newItem);
    }

}