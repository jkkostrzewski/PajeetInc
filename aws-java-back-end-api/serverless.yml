# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: back-end

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UserInfoTable", "Arn" ] }

package:
  artifact: target/back-end-api-dev.jar

functions:
#  addUserInfo:
#    handler: com.serverless.AddUserInfoHandler
#    description: Add user information to UserInfo table
#    events:
#      - http:
#          path: /userInfo
#          method: post
#          cors: true
#  getUserInfo:
#    handler: com.serverless.GetUserInfoHandler
#    description: Get user information with id from UserInfo table
#    events:
#      - http:
#          path: /userInfo/{id}
#          method: get
#          cors: true
#  getAllUserInfo:
#    handler: com.serverless.GetAllUserInfoHandler
#    description: Get all user information from UserInfo table
#    events:
#      - http:
#          path: /userInfo
#          method: get
#          cors: true
  signUp:
    handler: com.serverless.cognito.SignUpHandler
    description: Sign up new user
    events:
      - http:
          path: /signUp
          method: post
          cors: true
  confirmSignUp:
    handler: com.serverless.cognito.ConfirmSignUpHandler
    description: Confirm user account email
    events:
      - http:
          path: /confirmSignUp
          method: post
          cors: true
  addUserToGroup:
    handler: com.serverless.cognito.AddUserToGroupHandler
    description: Add user to group
    events:
      - http:
          path: /addUserToGroup
          method: post
          cors: true
  listCandidates:
    handler: com.serverless.cognito.ListCandidatesHandler
    description: List all candidates
    events:
      - http:
          path: /listCandidates
          method: get
          cors: true
  signIn:
    handler: com.serverless.cognito.SignInHandler
    description: Sign in user
    events:
      - http:
          path: /signIn
          method: get
          cors: true

  readTests:
    handler: com.serverless.ReadTestsHandler
    description: Get all tests from Tests table
    events:
      - http:
          path: /tests
          method: get
          cors: true
          integration: lambda
  readTestsByUsername:
    handler: com.serverless.ReadTestsByUsernameHandler
    description: Get all tests assigned to specific candidate
    events:
      - http:
          path: /tests/{username}
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "username": "$input.params("username")"
              }'

  insertTest:
    handler: com.serverless.InsertTestHandler
    description: Insert test into Tests table
    events:
      - http:
          path: /tests
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiter-id"),
                "testName": $input.json("$.test-name"),
                "minPoints": $input.json("$.min-points"),
                "maxPoints": $input.json("$.max-points"),
                "questions": $input.json("$.questions")
              }'

resources:
  Resources:
    UserInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserInfoTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: username
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    Tests:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Tests
        AttributeDefinitions:
          - AttributeName: recruiter_id
            AttributeType: S
          - AttributeName: test_id
            AttributeType: S
        KeySchema:
          - AttributeName: recruiter_id
            KeyType: HASH
          - AttributeName: test_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1