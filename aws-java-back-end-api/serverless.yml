# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: back-end

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:Query
#        - dynamodb:Scan
#        - dynamodb:GetItem
#        - dynamodb:PutItem
#        - dynamodb:UpdateItem
#        - dynamodb:DeleteItem
#      Resource:
#        - { "Fn::GetAtt": ["UserInfoTable", "Arn" ] }

package:
  artifact: target/back-end-api-dev.jar

functions:
  signUp:
    handler: com.serverless.cognito.SignUpHandler
    description: Sign up new user
    events:
      - http:
          path: /signUp
          method: post
          cors: true
  confirmSignUp:
    handler: com.serverless.cognito.ConfirmSignUpHandler
    description: Confirm user account email
    events:
      - http:
          path: /confirmSignUp
          method: post
          cors: true
  listCandidates:
    handler: com.serverless.cognito.ListCandidatesHandler
    description: List all candidates
    events:
      - http:
          path: /listCandidates
          method: get
          cors: true
  signIn:
    handler: com.serverless.cognito.SignInHandler
    description: Sign in user
    events:
      - http:
          path: /signIn
          method: post
          cors: true
  confirmPassword:
    handler: com.serverless.cognito.ConfirmForgotPassword
    description: Confirm changing user password
    events:
      - http:
          path: /confirmPassword
          method: post
          cors: true
  forgotPassword:
    handler: com.serverless.cognito.ForgotPasswordHandler
    description: Attempt changing password
    events:
      - http:
          path: /forgotPassword
          method: post
          cors: true

  readTests:
    #    role: testsTableAccess
    handler: com.serverless.tests.ReadTestsHandler
    description: Get all tests from Tests table
    events:
      - http:
          path: /tests
          method: get
          cors: true
          integration: lambda
  readTestsByUsername:
    #    role: testsTableAccess
    handler: com.serverless.tests.ReadTestsByUsernameHandler
    description: Get all tests assigned to specific candidate
    events:
      - http:
          path: /tests/{username}
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "username": "$input.params("username")"
              }'
  insertTest:
    #    role: testsTableAccess
    handler: com.serverless.tests.InsertTestHandler
    description: Insert test into Tests table
    events:
      - http:
          path: /tests
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testName": $input.json("$.testName"),
                "minPoints": $input.json("$.minPoints"),
                "maxPoints": $input.json("$.maxPoints"),
                "questions": $input.json("$.questions")
              }'
  passTest:
    #    role: testsTableAccess
    handler: com.serverless.tests.PassTestHandler
    description: Updating tests table with candidate answers
    events:
      - http:
          path: /pass-test
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "username": $input.json("$.username"),
                "answers": $input.json("$.answers")
              }'
  assignCandidate:
    #    role: testsTableAccess
    handler: com.serverless.tests.AssignCandidateHandler
    description: Assigning candidate to test
    events:
      - http:
          path: /assign-candidate
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "username": $input.json("$.username")
              }'
  rateTest:
    #    role: testsTableAccess
    handler: com.serverless.tests.RateTestHandler
    description: Rate candidate answers
    events:
      - http:
          path: /rate-test
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "recruiterId": $input.json("$.recruiterId"),
                "testId": $input.json("$.testId"),
                "testName": $input.json("$.testName"),
                "username": $input.json("$.username"),
                "answers": $input.json("$.answers")
              }'
  getTests:
    #    role: testsTableAccess
    handler: com.serverless.tests.GetTestsHandler
    description: Get all tests
    events:
      - http:
          path: /get-tests
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{
                "user": "$input.params("user")",
                "role": "$input.params("role")",
                "status": "$input.params("status")"
              }'
  removeTest:
    handler: com.serverless.tests.RemoveTestHandler
    description: Remove test by primary key
    events:
      - http:
          path: /remove-test
          method: delete
          cors: true
          integration: lambda
          request:
            template:
              application/json: "{
                'username': $input.json('username'),
                'recruiterId': $input.json('recruiterId'),
                'testId': $input.json('testId')
              }"
  removeCandidate:
    handler: com.serverless.tests.RemoveCandidateHandler
    description: Remove candidate from test by username
    events:
      - http:
          path: /remove-candidate
          method: put
          cors: true
          integration: lambda
          request:
            template:
              application/json: "{
               'username': $input.json('username'),
               'recruiterId': $input.json('recruiterId'),
               'testId': $input.json('testId')
              }"

#  iamRoleStatements:
#    - Effect: Allow
#      Action:
#        - dynamodb:Query
#        - dynamodb:Scan
#        - dynamodb:GetItem
#        - dynamodb:PutItem
#        - dynamodb:UpdateItem
#        - dynamodb:DeleteItem
#      Resource:
#        - { "Fn::GetAtt": ["UserInfoTable", "Arn" ] }


#resources:
#  Resources:
#    testsTableAccess:
#      Type: AWS::IAM::Role
#      Properties:
#        RoleName: TestsTableAccess
#        AssumeRolePolicyDocument:
#          Version: "2012-10-17"
#          Statement:
#          - Effect: Allow
#          Action:
#            - dynamodb:DescribeReservedCapacity*
#            - dynamodb:List*
#            - dynamodb:DescribeTimeToLive
#            - dynamodb:DescribeLimits
#            - dynamodb:CreateTable
#            - dynamodb:BatchGet*
#            - dynamodb:PutItem
#            - dynamodb:DescribeTable
#            - dynamodb:Delete*
#            - dynamodb:Get*
#            - dynamodb:BatchWrite*
#            - dynamodb:Scan
#            - dynamodb:Query
#            - dynamodb:DescribeStream
#            - dynamodb:Update*
#          "Resource": "*"

# TODO: jak jest juz tabela to jest problem https://stackoverflow.com/questions/41620437/how-to-continue-deploy-if-dynamodb-table-already-exists
#    Tests:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: Tests
#        AttributeDefinitions:
#          - AttributeName: recruiterId
#            AttributeType: S
#          - AttributeName: testId
#            AttributeType: S
#        KeySchema:
#          - AttributeName: recruiterId
#            KeyType: HASH
#          - AttributeName: testId
#            KeyType: RANGE
#        ProvisionedThroughput:
#          ReadCapacityUnits: 1
#          WriteCapacityUnits: 1
